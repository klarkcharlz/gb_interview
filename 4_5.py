"""
Написать программу «Банковский депозит».
Она должна состоять из функции и ее вызова с аргументами.
Клиент банка делает депозит на определенный срок.
В зависимости от суммы и срока вклада определяется процентная ставка:
1000–10000 руб
(6 месяцев — 5 % годовых, год — 6 % годовых, 2 года — 5 % годовых).
10000–100000 руб (6 месяцев — 6 % годовых, год — 7 % годовых, 2 года – 6.5 % годовых).
100000–1000000 руб (6 месяцев — 7 % годовых, год — 8 % годовых, 2 года — 7.5 % годовых).
Необходимо написать функцию, в которую будут передаваться параметры:
сумма вклада и срок вклада.
Каждый из трех банковских продуктов должен быть представлен в виде словаря
с ключами (begin_sum, end_sum, 6, 12, 24).
Ключам соответствуют значения начала и конца диапазона суммы вклада
и значения процентной ставки для каждого срока.
В функции необходимо проверять принадлежность суммы вклада
к одному из диапазонов и выполнять расчет по нужной процентной ставке.
Функция возвращает сумму вклада на конец срока.

Усовершенствовать программу «Банковский депозит».
Третьим аргументом в функцию должна передаваться
фиксированная ежемесячная сумма пополнения вклада.
Необходимо в главной функции реализовать вложенную функцию
подсчета процентов для пополняемой суммы.
Примем, что клиент вносит средства в последний день каждого месяца,
кроме первого и последнего.
Например, при сроке вклада в 6 месяцев
пополнение происходит в течение 4 месяцев.
Вложенная функция возвращает сумму дополнительно внесенных средств
(с процентами),
а главная функция — общую сумму по вкладу на конец периода.
"""


def calculation_of_contribution(begin_sum: float, period: int, replenishment: float = 0):
    """
    Расчет банковского депозита
    :param begin_sum: начальная сумма
    :param period: период вклада
    :param replenishment: ежемесячное пополнение
    :return: словарь с ключами (begin_sum, end_sum, 6, 12, 24)
    """

    deposit = {
        10000: {
            6: 5,
            12: 6,
            24: 5
        },
        100000: {
            6: 6,
            12: 7,
            24: 6.5
        },
        1000000: {
            6: 7,
            12: 8,
            24: 7.5
        }
    }
    # определим под какие условия попадает стартовая сумма
    start_status = None
    if 1_000 <= begin_sum < 10_000:
        start_status = 10_000
    elif 10_000 <= begin_sum < 100_000:
        start_status = 100_000
    elif begin_sum >= 100_000:
        start_status = 1_000_000
    bid = None
    if start_status:
        # определим процентную ставку
        if 6 <= period < 12:
            bid = deposit[start_status][6]
        elif 12 <= period < 24:
            bid = deposit[start_status][12]
        elif period >= 24:
            bid = deposit[start_status][24]
    else:
        return f"Извините ваш вклад слишком мал: {begin_sum}."

    # расчет
    end_sum = None
    if bid:
        m_6 = None
        m_12 = None
        m_24 = None
        end_sum = begin_sum
        for i in range(period):
            end_sum *= 1 + ((bid / 100) / 12)
            if i != (period - 1):
                end_sum += replenishment
            if (i + 1) == 6:
                m_6 = end_sum
            if (i + 1) == 12:
                m_12 = end_sum
            if (i + 1) == 24:
                m_24 = end_sum
            print(f"{i + 1} месяц. Процент: {bid}")
    else:
        return f"Вклады на такой короткий срок не принимаем: {period}"

    def count():
        """
        Подсчет процентов от дополнительно внесенных пополнений
        :return: сумму дополнительно внесенных средств (с процентами)
        """
        end_sum_ = replenishment
        for j in range(period):
            if j != 0:  # в конце первого месяца не производим расчета, еще не было пополнений
                end_sum_ *= 1 + ((bid / 100) / 12)
            if j != (period - 1):
                end_sum_ += replenishment
        return end_sum_

    deposit_from_replenishment = 0
    if replenishment:
        deposit_from_replenishment = count()

    return {"begin_sum": begin_sum, "end_sum": end_sum,
            6: m_6, 12: m_12, 24: m_24,
            "deposit_from_replenishment": deposit_from_replenishment}


if __name__ == "__main__":
    print(calculation_of_contribution(100_000, 25, 1000))
